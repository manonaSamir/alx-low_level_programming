!<arch>
0-isupper.c/    0           0     0     644     223       `
#include "main.h"

/**
 * _isupper -  function that checks for uppercase character.
 * @c: the character to be checked
 * Return: 1 if c is uppercase, 0 otherwise
 */
int _isupper(int c)
{
	return (c >= 'A' && c <= 'Z');
}

0-memset.c/     0           0     0     644     323       `
#include "main.h"

/**
 * _memset - this funtion fills memory with a constant byte.
 * @b: a constant byte.
 * @n: number of bytes.
 * @s: pointers to memory.
 *
 * Return: A pointer to memory area s.
 */

char *_memset(char *s, char b, unsigned int n)
{
unsigned int i;
for (i = 0; i < n; i++)
{
s[i] = b;
}
return (s);
}

0-strcat.c/     0           0     0     644     354       `
#include "main.h"
#include "2-strlen.c"

/**
 * *_strcat - concatenates two strings
 * @dest: pointer to first value
 * @src: pointer to second value
 * Return: a pointer to the resulting string
 */

char *_strcat(char *dest, char *src)
{
unsigned int i, j = 0;
for (i = _strlen(dest); j <= _strlen(src); i++)
{
dest[i] = src[j];
j++;
}
return (dest);
}
100-atoi.c/     0           0     0     644     479       `
#include "main.h"
#include "2-strlen.c"

/**
 * _atoi - convert a string to an integer.
 * @s: the string to copy to the destination.
 * Return: a copy of the src.
 */

int _atoi(char *s)
{
int i, minus, boolean, result;
result = boolean = 0;
minus = -1;
for (i = 0; i < _strlen(s); i++)
{
if (s[i] == '-')
minus *= -1;
if (s[i] >= '0' && s[i] <= '9')
{
result *= 10;
result -= (s[i] - '0');
boolean = 1;
}
else if (boolean == 1)
{
break;
}
}
result *= minus;
return (result);
}

1-isdigit.c/    0           0     0     644     204       `
#include "main.h"

/**
 * _isdigit -  checks for a digit (0 through 9).
 * @c: the character to be checked
 * Return: c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}
1-memcpy.c/     0           0     0     644     395       `
#include "main.h"

/**
 * _memcpy - fuction that copies n bytes from a source to a destination.
 * @dest: destionation for the copying the bytes to.
 * @src: source of the bytes to copy.
 * @n: number of bytes to copy over.
 *
 * Return: a pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i;
for (i = 0; i < n; i++)
{
dest[i] = src[i];
}
return (dest);
}

1-strncat.c/    0           0     0     644     396       `
#include "main.h"
#include "2-strlen.c"


/**
 * *_strncat - concatenates two strings
 * @dest: pointer to first value
 * @src: pointer to second value
 *@n: byte of string
 * Return: a pointer to the resulting string
 */

char *_strncat(char *dest, char *src, int n)
{
int i, j = 0;
int k = _strlen(src);
for (i = _strlen(dest); j < n && j <= k; i++)
{
dest[i] = src[j];
j++;
}
return (dest);
}
2-strchr.c/     0           0     0     644     384       `
#include "main.h"
#include <stdio.h>

/**
 * _strchr - that locates a character in a string.
 * @s: string to search for the character in.
 * @c: char to the search for.
 * Return: pointer to char or else NULL.
 */

char *_strchr(char *s, char c)
{
unsigned int i;
for (i = 0; i != '\0'; i++)
{
if (s[i] == c)
{
return (s + i);
}
}
if (c == '\0')
{
return (s + i);
}
return (NULL);
}
2-strlen.c/     0           0     0     644     235       `
#include "main.h"

/**
 * _strlen - function that returns the length of a string.
 * @s: pointer to first value
 * Return: the length of a string
 */

int _strlen(char *s)
{
int i;
for (i = 0; *(s + i) != '\0'; i++)
{

}
return (i);
}

2-strncpy.c/    0           0     0     644     397       `

#include "main.h"
#include "2-strlen.c"

/**
 * _strncpy - copies a string
 * @dest: destination string
 * @src: source string
 * @n: number of bytes to copy
 *
 * Return: pointer to the resulting string
 */

char *_strncpy(char *dest, char *src, int n)
{
int i;
int k = _strlen(src);
for (i = 0; i < n && i < k; i++)
{
dest[i] = src[i];
}
for (; i < n; i++)
{
dest[i] = '\0';
}
return (dest);
}

3-islower.c/    0           0     0     644     241       `
#include "main.h"

/**
 * _islower - Write a function that checks for lowercase character.
 * @c: character to test.
 *
 * Return: 1 (True) else 0 (False)
 *
 */

int _islower(int c)
{
if (c >= 'a' && c <= 'z')
{
return (1);
}
return (0);
}

3-puts.c/       0           0     0     644     206       `
#include "main.h"

/**
 * _puts - function that prints a string.
 * @str: pointer to first value
 */

void _puts(char *str)
{
int i;
for (i = 0; str[i] != '\0'; i++)
{
_putchar(str[i]);
}
_putchar('\n');
}
3-strcmp.c/     0           0     0     644     312       `
#include "main.h"

/**
 * _strcmp -  compares two strings
 * @s1: @s1: the string to compare
 * @s2: @s1: the string to compare
 * Return: a int value.
 */

int _strcmp(char *s1, char *s2)
{
int i = 0;
for (; s1[i] == s2[i]; i++)
{
if (s1[i] == '\0' && s2[i] == '\0')
{
return (0);
}
}
return (s1[i] - s2[i]);
}
3-strspn.c/     0           0     0     644     596       `
#include "main.h"

/**
 * _strspn - function  calculates  the  length (in bytes) of the initial
 * segment of s which consists entirely of bytes in accept.
 * @s: string to search in.
 * @accept: bytes in which to search for.
 *
 * Return: the number (U_INT) of bytes matching accept.
 */

unsigned int _strspn(char *s, char *accept)
{
unsigned int i, j, count = 0, foundBreak = 0;

for (i = 0; s[i] != '\0'; i++)
{
if (s[i] == ' ')
{
foundBreak = 1;
}
for (j = 0; accept[j] != '\0'; j++)
{
if (s[i] == accept[j])
{
count++;
break;
}
}
if (foundBreak > 0)
{
return (count);
}
}
return (count);
}
4-isalpha.c/    0           0     0     644     259       `
#include "main.h"

/**
 * _isalpha - check if the given character is lower case.
 * @c: character to test.
 *
 * Return: 1 (True) else 0 (False)
 *
 */

int _isalpha(int c)
{
if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
{
return (1);
}
return (0);
}

4-strpbrk.c/    0           0     0     644     415       `
#include "main.h"

/**
 * _strpbrk - function that searches a string for any of a set of bytes.
 * @s: haystack.
 * @accept: needle.
 *
 * Return: pointer to to byte s that matches one of the byes in accept, or NUL
 */


char *_strpbrk(char *s, char *accept)
{
unsigned int i, j;

for (i = 0; s[i] != '\0'; i++)
{
for (j = 0; accept[j] != '\0'; j++)
{
if (s[i] == accept[j])
{
return ((s + i));
}
}
}
return (0);
}

5-strstr.c/     0           0     0     644     508       `
#include "main.h"

/**
 * _strstr - function that locates a substring.
 * @haystack: source string to search through.
 * @needle: string to search for.
 * Return: return beginning of located substring or NULL.
 */

char *_strstr(char *haystack, char *needle)
{
unsigned int i, j = 0;
for (i = 0; haystack[i] != '\0'; i++)
{
if (haystack[i] == needle[j])
{
j++;
}
if (needle[j] == '\0' && j > 0)
{
return ((haystack + i - j + 1));
}
else if (needle[j] == '\0' && j < 1)
{
return (haystack);
}
}
return (0);
}
6-abs.c/        0           0     0     644     233       `
#include "main.h"

/**
 * _abs - return the absolute value of a given integer.
 * @n: value use to find the absolute value.
 * Return:  absolute of any number
 */

int _abs(int n)
{
if (n < 0)
{
return (-n);
}
else
{
return (n);
}
}

9-strcpy.c/     0           0     0     644     340       `
#include "main.h"
#include "2-strlen.c"

/**
 * _strcpy - fuction copies the string pointed
 * @dest: pointer to copy the string to.
 * @src: the string to copy to the destination.
 *
 * Return: a copy of the src.
 */

char *_strcpy(char *dest, char *src)
{
int i;
for (i = 0; i <= _strlen(src); i++)
{
dest[i] = src[i];
}
return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

